[{
	"title": "Assignment-2",
	"activityType": "assignment",
	"questions": [{
		"questionType": "fillintheblank",
		"max_marks": 40,
		"graded": true,
		"questionText": [{
				"text": "<b>The below is the continuation of yesterday's problem so once go through the previous days' problem and start today's problem<br>Every day you will be given a code you need to trace it and record a screencast of the tracing and submit it. Reach your mentor for the exact format of the video</b><br><br><br>Analysis<br><br>Each of the puzzles above was solved in less than a fifth of a second. What about really hard puzzles? Finnish mathematician Arto Inkala described his <a href=\"http://www.usatoday.com/news/offbeat/2006-11-06-sudoku_x.htm\"> 2006 puzzle</a> s \"the most difficult sudoku-puzzle known so far\" and his <a href=\"http://www.mirror.co.uk/fun-games/sudoku/2010/08/19/world-s-hardest-sudoku-can-you-solve-dr-arto-inkala-s-puzzle-115875-22496946/\"> 2010 puzzle</a> as \"the most difficult puzzle I've ever created.\" My program solves them in 0.01 seconds each (solve_all will be defined below):"
			},
			{
				"image": {
					"imageName": "",
					"imageSRC": "image-2.png"
				}
			},
			{
				"image": {
					"imageName": "",
					"imageSRC": "image-3.png"
				}
			},
			{
				"text": "I guess if I want a really hard puzzle I'll have to make it myself. I don't know how to make hard puzzles, so I generated a million random puzzles. My algorithm for making a random puzzle is simple: first, randomly shuffle the order of the squares. One by one, fill in each square with a random digit, respecting the possible digit choices. If a contradiction is reached, start over. If we fill at least 17 squares with at least 8 different digits then we are done. (Note: with less than 17 squares filled in or less than 8 different digits it is known that there will be duplicate solutions. Thanks to Olivier Grégoire for the fine suggestion about 8 different digits.) Even with these checks, my random puzzles are not guaranteed to have one unique solution. Many have multiple solutions, and a few (about 0.2%) have no solution. Puzzles that appear in books and newspapers always have one unique solution.<br><br>The average time to solve a random puzzle is 0.01 seconds, and more than 99.95% took less than 0.1 seconds, but a few took much longer:"
			},
			{
				"image": {
					"imageName": "",
					"imageSRC": "image-4.png"
				}
			},
			{
				"text": "Here are the times in seconds for the 139 out of a million puzzles that took more than a second, sorted, on linear and log scales:"

			},
			{
				"image": {
					"imageName": "",
					"imageSRC": "image-5.png"
				}
			},
			{
				"image": {
					"imageName": "",
					"imageSRC": "image-6.png"
				}
			},
			{
				"text": "It is hard to draw conclusions from this. Is the uptick in the last few values significant? If I generated 10 million puzzles, would one take 1000 seconds? Here's the hardest (for my program) of the million random puzzles:"
			},
			{
				"image": {
					"imageName": "",
					"imageSRC": "image-7.png"
				}
			},
			{
				"text": "Grégoire's suggestion about checking for 8 digits, so note that any solution to this puzzle leads to another solution where the 1s and 7s are swapped.) But is this an intrinsicly hard puzzle? Or is the difficulty an artifact of the particular variable- and value-ordering scheme used by my search routine? To test I randomized the value ordering (I changed for d in values[s] in the last line of search to be for d in shuffled(values[s]) and implemented shuffled using random.shuffle). The results were starkly bimodal: in 27 out of 30 trials the puzzle took less than 0.02 seconds, while each of the other 3 trials took just about 190 seconds (about 10,000 times longer). There are multiple solutions to this puzzle, and the randomized search found 13 different solutions. My guess is that somewhere early in the search there is a sequence of squares (probably two) such that if we choose the exact wrong combination of values to fill the squares, it takes about 190 seconds to discover that there is a contradiction. But if we make any other choice, we very quickly either find a solution or find a contradiction and move on to another choice. So the speed of the algorithm is determined by whether it can avoid the deadly combination of value choices.<br><br>Randomization works most of the time (27 out of 30), but perhaps we could do even better by considering a better value ordering (one popular heuristic is least-constraining value, which chooses first the value that imposes the fewest constraints on peers), or by trying a smarter variable ordering.<br><br>More experimentation would be needed before I could give a good characterization of the hard puzzles. I decided to experiment on another million random puzzles, this time keeping statistics on the mean, 50th (median), 90th and 99th percentiles, maximum and standard deviation of run times. The results were similar, except this time I got two puzzles that took over 100 seconds, and one took quite a bit longer: 1439 seconds. It turns out this puzzle is one of the 0.2% that has no solution, so maybe it doesn't count. But the main message is that the mean and median stay about the same even as we sample more, but the maximum keeps going up--dramatically. The standard deviation edges up too, but mostly because of the very few very long times that are way out beyond the 99th percentile. This is a heavy-tailed distribution, not a normal one.<br><br>For comparison, the tables below give the statistics for puzzle-solving run times on the left, and for samples from a normal (Gaussian) distribution with mean 0.014 and standard deviation 1.4794 on the right. Note that with a million samples, the max of the Gaussian is 5 standard deviations above the mean (roughly what you'd expect from a Gaussian), while the maximum puzzle run time is 1000 standard deviations above the mean."
			}
		]
	}]
}]